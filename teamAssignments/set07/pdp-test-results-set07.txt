PDP Test Report for set07


Test Name: rainfall-tests
Definitions:
	(define (rainfall/test lst)
	  (local
	   ((define data-of-interest (takef lst (Î» (x) (not (equal? x -999)))))
	    (define (average lst)
	      (if (zero? (length lst)) 0 (/ (apply + lst) (length lst)))))
	   (average (filter (compose not negative?) data-of-interest))))
	(define TEST-CASE
	  (list
	   1
	   2
	   3
	   4
	   23
	   -1
	   23
	   -3
	   423
	   -3
	   42
	   14
	   -131
	   -32
	   -1
	   32
	   43
	   12
	   94
	   42
	   32
	   41
	   -2323
	   223
	   421
	   23
	   23
	   41
	   48
	   84
	   0
	   23
	   14
	   -999
	   23
	   34
	   12
	   -99
	   12))

Test Case: 
  (test-equal? "TC#0 rainfall empty list" (rainfall/test '()) 0)
Test Result: Success

Test Case: 
  (test-equal? "TC#1 rainfall" (rainfall TEST-CASE) (rainfall/test TEST-CASE))
Test Result: Success


Results for Suite rainfall-tests:
  Test Successes: 2
  Test Failures: 0
  Test Errors: 0

Raw Score: 2/2
Normalized Score: 15/15


Test Name: outline-tests
Definitions:

Test Case: 
  (test-true "TC#2 empty list is legal as per DD" (legal-flat-rep? '()))
Test Result: Success

Test Case: 
  (test-true
   "TC#3 given flat rep is legal"
   (legal-flat-rep?
    (list
     (make-line (list 1) "The first section")
     (make-line (list 1 1) "A subsection with no subsections")
     (make-line (list 1 2) "Another subsection")
     (make-line (list 1 2 1) "This is a subsection of 1.2")
     (make-line (list 1 2 1 1) "This is a subsection of 1.2.1")
     (make-line (list 1 2 1 2) "This is a subsection of 1.2.1")
     (make-line (list 1 2 2) "This is another subsection of 1.2")
     (make-line (list 1 3) "The last subsection of 1")
     (make-line (list 2) "Another section")
     (make-line (list 2 1) "More stuff")
     (make-line (list 2 2) "Still more stuff"))))
Test Result: Success

Test Case: 
  (test-false
   "TC#4 flat rep missed 1.2.1 however has subsections"
   (legal-flat-rep?
    (list
     (make-line (list 1) "The first section")
     (make-line (list 1 1) "A subsection with no subsections")
     (make-line (list 1 2) "Another subsection")
     (make-line (list 1 2 1 1) "This is a subsection of 1.2.1")
     (make-line (list 1 2 1 2) "This is a subsection of 1.2.1")
     (make-line (list 1 2 2) "This is another subsection of 1.2")
     (make-line (list 1 3) "The last subsection of 1")
     (make-line (list 2) "Another section")
     (make-line (list 2 1) "More stuff")
     (make-line (list 2 2) "Still more stuff"))))
Test Result: Success

Test Case: 
  (test-false
   "TC#5 flat rep missed 2 however has subsections"
   (legal-flat-rep?
    (list
     (make-line (list 1) "The first section")
     (make-line (list 1 1) "A subsection with no subsections")
     (make-line (list 1 2) "Another subsection")
     (make-line (list 1 2 1) "This is a subsection of 1.2")
     (make-line (list 1 2 1 1) "This is a subsection of 1.2.1")
     (make-line (list 1 2 1 2) "This is a subsection of 1.2.1")
     (make-line (list 1 2 2) "This is another subsection of 1.2")
     (make-line (list 1 3) "The last subsection of 1")
     (make-line (list 2 1) "More stuff")
     (make-line (list 2 2) "Still more stuff"))))
Test Result: Success

Test Case: 
  (test-false
   "TC#6 flat rep should start with 1"
   (legal-flat-rep? (list (make-line (list 2) "The first section"))))
Test Result: Success

Test Case: 
  (test-equal?
   "TC#7 tree rep to flat rep nested"
   (tree-rep-to-flat-rep
    (list
     (make-section
      "The first section"
      (list
       (make-section "A subsection with no subsections" empty)
       (make-section
        "Another subsection"
        (list
         (make-section
          "This is a subsection of 1.2"
          (list (make-section "This is subsection of 1.2.1" empty)))
         (make-section "This is another subsection of 1.2" empty)))
       (make-section "The last subsection of 1" empty)))
     (make-section
      "Another section"
      (list
       (make-section "More stuff" empty)
       (make-section "Still more stuff" empty)))))
   (list
    (make-line (list 1) "The first section")
    (make-line (list 1 1) "A subsection with no subsections")
    (make-line (list 1 2) "Another subsection")
    (make-line (list 1 2 1) "This is a subsection of 1.2")
    (make-line (list 1 2 1 1) "This is subsection of 1.2.1")
    (make-line (list 1 2 2) "This is another subsection of 1.2")
    (make-line (list 1 3) "The last subsection of 1")
    (make-line (list 2) "Another section")
    (make-line (list 2 1) "More stuff")
    (make-line (list 2 2) "Still more stuff")))
Test Result: Success

Test Case: 
  (test-equal?
   "TC#8 tree rep to flat rep"
   (tree-rep-to-flat-rep (list (make-section "The first section" '())))
   (list (make-line (list 1) "The first section")))
Test Result: Success

Test Case: 
  (test-equal? "TC#9 empty tree rep to flat rep" (tree-rep-to-flat-rep '()) '())
Test Result: Success


Results for Suite outline-tests:
  Test Successes: 8
  Test Failures: 0
  Test Errors: 0

Raw Score: 8/8
Normalized Score: 15/15


Overall Results:
  Test Successes: 10
  Test Failures: 0
  Test Errors: 0

Raw Score: 10/10
Normalized Score: 15/15

